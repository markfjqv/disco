# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//flutter/impeller/tools/impeller.gni")
import("//flutter/testing/testing.gni")

disco_root = "//flutter/impeller/disco"

template("disco_component") {
  impeller_component(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ "$disco_root/:disco_public_config" ]
  }
}

template("disco_application") {
  assert(defined(invoker.dart_main), "The Dart main must be defined.")
  assert(defined(invoker.assets), "The assets must be defined.")
  assert(is_mac, "Disco only supports the Mac platform at this time.")

  fixture_target_name = "disco_fixtures_$target_name"
  test_fixtures(fixture_target_name) {
    dart_main = invoker.dart_main
    fixtures = invoker.assets
    fixtures += [ "//third_party/icu/common/icudtl.dat" ]
  }

  disco_component(target_name) {
    # TODO(csg): This is only necessary because we are stealing the test
    # harnesses snapshotters.
    testonly = true
    target_type = "executable"
    output_name = "disco_$target_name"
    deps = [
      ":$fixture_target_name",
      "//flutter/impeller/disco/shell",
    ]
  }
}

template("epoxy") {
  assert(defined(invoker.source), "The epoxy source must be specified.")
  assert(defined(invoker.template_source),
         "The epoxy template source must be specified.")
  assert(defined(invoker.extension), "The output extension must be specified.")

  file_name = get_path_info(invoker.source, "name")
  extension = invoker.extension
  out_path = "$target_gen_dir/$file_name$extension"

  compiled_action(target_name) {
    tool = "//flutter/impeller/disco/epoxy"
    inputs = [
      invoker.source,
      invoker.template_source,
    ]
    outputs = [ out_path ]
    args = [
      "--output",
      rebase_path(out_path, root_build_dir),
      "--idl",
      rebase_path(invoker.source, root_build_dir),
      "--template-file",
      rebase_path(invoker.template_source, root_build_dir),
    ]
  }
}

template("epoxy_native") {
  assert(defined(invoker.source),
         "The Epoxy bindings definition must be specified.")

  cxx_target_name = "epoxy_cxx_$target_name"
  epoxy(cxx_target_name) {
    source = invoker.source
    template_source =
        "//flutter/impeller/disco/epoxy/template/cxx.template.epoxy"
    extension = ".cc"
  }

  hdr_target_name = "epoxy_hdr_$target_name"
  epoxy(hdr_target_name) {
    source = invoker.source
    template_source =
        "//flutter/impeller/disco/epoxy/template/hdr.template.epoxy"
    extension = ".h"
  }

  dart_target_name = "epoxy_dart_$target_name"
  epoxy(dart_target_name) {
    source = invoker.source
    template_source =
        "//flutter/impeller/disco/epoxy/template/dart.template.epoxy"
    extension = ".dart"
  }

  config_target_name = "epoxy_native_config_$target_name"
  config(config_target_name) {
    include_dirs = [
      target_gen_dir,
      "$root_gen_dir/flutter/impeller",
    ]
  }

  disco_component(target_name) {
    public_configs = [ ":$config_target_name" ]

    sources = []

    sources += get_target_outputs(":$cxx_target_name")
    sources += get_target_outputs(":$hdr_target_name")

    deps = [
      ":$cxx_target_name",
      ":$hdr_target_name",
      "//flutter/impeller/disco/runtime:runtime_types",
    ]

    data_deps = [ ":$dart_target_name" ]
  }
}
